===============================================================================
Tema 1 SD - Music Playlist
Nume: Minea Radu-Stefan
Seria: CA
Grupa: 314CA
===============================================================================
Timpul petrecut pe tema: ~ 3 zile
===============================================================================
Descrierea proiectului

> Tema proiectului este data de simularea unui Playlist Manager, ori, mai
precis, a urmatoarelor functionalitati ale acestuia:
	- Adaugarea melodiilor:
		+ La inceputul/finalul listei		(ADD_FIRST/LAST)
		+ Dupa melodia care este pe play	(ADD_AFTER)
	- Stergerea melodiilor:
		+ La inceputul sau finalul listei	(DEL_FIRST/LAST)
		+ Care sunt pe play			(DEL_CURR)
		+ Precizate de user			(DEL_SONG)
	- Afisarea melodiilor:
		+ De la inceputul/finalul listei	(SHOW_FIRST/LAST)
		+ Care sunt pe play			(SHOW_CURR)
		+ Afisarea intregului playlist		(SHOW_PLAYLIST)
	- Schimbarea melodiei care este pe play:
		+ Punerea pe play a urmatoarei melodii	(MOVE_NEXT)
		+ Punerea pe play a melodiei dinainte	(MOVE_PREV)
===============================================================================
Rulare

> User-ul creeaza un fisier <media.in> unde isi va trece comenzile dorite
> Terminal: 
	- make
	- ./tema1 <media.in> <media.out>
===============================================================================
Structura proiectului

* Makefile
> Include regulile build si clean

* playlist.c
> "main-ul" programului
> Se interpreteaza inputul venit din <media.in> prin statement-ul switch

* utils.c & utils.h
> opening_file_check(...) : verificare a deschiderii corecte a fisierelor
> Includ functii ce extrag metadatele fisierelor (tag, title, album, artist, 
year) citind binar fiserele melodiilor


* LinkedList.c & LinkedList.h
> Pentru simplitate, am inclus cursorul in structura listei duble inlantuite:
	
	struct LinkedList {
		struct Node *head, *cursor;
		int size;
	}

	- A fost mult mai usor de manipulat cursorul astfel decat l-am fi
	declarat in main, fie static fie dinamic

* add.c
> add_after(...) este construit cu ajutorul add_first(...) si add_last(...)

* del.c
> del_curr(...) si del_song(...) sunt construite cu ajutorul del_first(...),
del_mid(...) si del_last(...)
	- del_mid(...):	playlist-ul are cel putin 3 elemente, si se vrea sters
			o melodie care nu este nici la inceputul, nici la
			finalul listei

* show.c
> Functiile de afisare a melodiilor cerute sau a playlist-ului, cu mesajele
de eroare aferente

* move.c
> moveRemovedCursor(...) este folosit in toate functiile de stergere pentru a
repozitiona cursorul plasat pana in momentul de fata pe melodia ce se vrea a fi
stearsa
===============================================================================
Limitari

> Codul nu este tocmai optim (d.p.d.v. al timpului):
	- Pentru add_after, del_song, del_curr se fac unele verificari de 2 ori
	 (de exemplu, daca lista este initializata):
		+ Cele 3 functii mentionate mai sus apeleaza inauntrul lor 
		add_first/last si del_first/last care fac si ele aceleasi
		verificari
		+ Se intampla astfel, deoarece add/del_first/last pot fi
		apelate si prin input-ul (adesea eronat) al utilizatorului,
		dar si in interiorul functiilor de adaugare/stergere mai mari,
		in scopul unei logici mai fluente a progrmaului
===============================================================================
Observatii

> Initial, m-a speriat tema, pentru ca vedeam ca aveam 12 functionalitati de
implementat in 3 zile (thank you, time management skills), iar colegii
isi puneau foarte, foarte multe intrebari pe grup, in special legate de
valgrind

> Totusi, odata ce am facut "main-ul" programului (playlist.c) si am facut
add_first/last si del_first/last, restul au venit aproape de la sine

> Overall, a fost o tema care m-a convins de utilitatea implementarii
incrementale: ciclul <think - code - test - debug> aplicat fiecarei
functionalitati in parte:
	- Desi teama de valgrind-ul de pe checker era mare, pana si prima
	incarcare pe checker a fost flawless d.p.d.v. al valgrind-ului
		+ Asta pentru ca am testat local fara mila, stiind ca daca
		o functie crapa din neatentia la detalii pe parcurs, crapa tot
		mai incolo
